# Install and load the "dplyr" library
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(manufacturers)
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(cars_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(cars_1997,
average = ((hwy + cty) / 2)
)
View(cars_1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
View(two_wheel_drive)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(two_wheel_drive, hwy == min(hwy))
select(
filter(
two_wheel_drive,
hwy == min(hwy)),
id)
function(year_choice, make_choice)
function(year_choice, make_choice) {
filter(vehicle)
select(model)
}
filter(vehicle)
select(model)
function(year_choice, make_choice) {
filter(vehicle)
select(model)
}
paste("1995", "Honda")
filter(vehicle)
select(model)
function(year_choice, make_choice) {
filter(vehicle)
select(model)
}
paste(1995, "Honda")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
View("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
View("nycflights13")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
paste("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
install.packages("nycflights13")
library("nycflights13")
library("dplyr")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(dep_delay_by_month)
View("nycflights13")
View(nycflights13)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
?plot()
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(delay)
View(Flights)
View(flights)
dep_delay_by_month <- group_by(dep_delay)
plot(dep_delay_by_month)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
#filter(is.na(dep_delay))
summarize(
avg_dep_delay <- mean(dep_delay, na.rm = TRUE)
)
dep_delay_by_month
# Which month had the greatest average departure delay?
dep_delay_by_month %>%
filter(avg_dep_delay == max(avg_dep_delay))
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
?plot()
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
head(dep_delay_by_month)
setwd("~/INFO201/book-exercises/chapter-12-exercises/exercise-1")
filtered <- filter(filtered, hwy == max(hwy))
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(manufacturers)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(manufacturers)
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(cars_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(cars_1997,
average = ((hwy + cty) / 2)
)
View(cars_1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
View(two_wheel_drive)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(two_wheel_drive, hwy == min(hwy))
select(
filter(
two_wheel_drive,
hwy == min(hwy)),
id)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
mileage_year <- function(year_choice, make_choice)
filtered <- filter(vehicles, make == make_choice, year == year_choice)
filtered <- filter(filtered, hwy == max(hwy))
select(filtered, model)
# What was the most efficient Honda model of 1995?
mileage_year("Honda", 1995)
